# Generated by Django 4.2.7 on 2025-09-08 03:08

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ValidationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content_id', models.UUIDField(help_text='ID of the content being validated')),
                ('content_type', models.CharField(help_text='Type of content (knowledge_component, comprehension_check)', max_length=50)),
                ('validation_type', models.CharField(help_text='Type of validation performed', max_length=50)),
                ('status', models.CharField(choices=[('PASSED', 'Passed'), ('FAILED', 'Failed'), ('WARNING', 'Warning')], max_length=20)),
                ('details', models.JSONField(help_text='Additional validation details')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['content_id'], name='database_va_content_d7bda7_idx'), models.Index(fields=['validation_type'], name='database_va_validat_4ccf43_idx'), models.Index(fields=['status'], name='database_va_status_9183eb_idx')],
            },
        ),
        migrations.CreateModel(
            name='LearningObjective',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The main topic or concept', max_length=255)),
                ('core_question', models.TextField(help_text='The central question this objective addresses')),
                ('summary', models.TextField(help_text='Brief summary of the learning objective')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('GENERATING', 'Generating'), ('READY', 'Ready'), ('FAILED', 'Failed')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status'], name='database_le_status_78ca13_idx'), models.Index(fields=['created_at'], name='database_le_created_02005b_idx')],
            },
        ),
        migrations.CreateModel(
            name='GenerationQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('topic', models.CharField(help_text='The topic to generate content for', max_length=255)),
                ('priority', models.IntegerField(default=0, help_text='Priority level (higher = more urgent)')),
                ('status', models.CharField(choices=[('QUEUED', 'Queued'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='QUEUED', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if generation failed')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-priority', 'created_at'],
                'indexes': [models.Index(fields=['status'], name='database_ge_status_c13088_idx'), models.Index(fields=['priority', 'created_at'], name='database_ge_priorit_b5c112_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIPrompt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('prompt_type', models.CharField(choices=[('ORCHESTRATOR', 'Orchestrator'), ('WORKER', 'Worker'), ('QUALITY_CONTROL', 'Quality Control')], max_length=50)),
                ('template', models.TextField(help_text='The prompt template with placeholders')),
                ('variables', models.JSONField(default=list, help_text='List of required variables for this prompt')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['prompt_type', 'name'],
                'indexes': [models.Index(fields=['prompt_type'], name='database_ai_prompt__970af3_idx'), models.Index(fields=['is_active'], name='database_ai_is_acti_4413d7_idx')],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeComponent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('CORE_CONCEPT', 'Core Concept'), ('FACT', 'Fact'), ('EXAMPLE', 'Example'), ('PRINCIPLE', 'Principle'), ('ANALOGY', 'Analogy'), ('WARNING', 'Warning')], max_length=50)),
                ('content', models.TextField(help_text='The actual content of this component')),
                ('sort_order', models.IntegerField(help_text='Order of this component within the objective')),
                ('validation_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('FLAGGED', 'Flagged'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('validation_notes', models.TextField(blank=True, help_text='Notes from validation process')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_components', to='database.learningobjective')),
            ],
            options={
                'ordering': ['learning_objective', 'sort_order'],
                'indexes': [models.Index(fields=['learning_objective', 'type'], name='database_kn_learnin_0858f3_idx'), models.Index(fields=['validation_status'], name='database_kn_validat_f349ff_idx'), models.Index(fields=['learning_objective', 'sort_order'], name='database_kn_learnin_576144_idx')],
            },
        ),
        migrations.CreateModel(
            name='GenerationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prompt_used', models.TextField(help_text='The prompt that was sent to the AI')),
                ('ai_response', models.TextField(help_text='The response from the AI')),
                ('generation_time', models.FloatField(help_text='Time taken for generation in seconds')),
                ('tokens_used', models.IntegerField(help_text='Number of tokens used')),
                ('success', models.BooleanField(help_text='Whether the generation was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if generation failed')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('learning_objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generation_logs', to='database.learningobjective')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['learning_objective'], name='database_ge_learnin_37dbb5_idx'), models.Index(fields=['success'], name='database_ge_success_7812fc_idx'), models.Index(fields=['created_at'], name='database_ge_created_416221_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComprehensionCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField(help_text='The question text')),
                ('options', models.JSONField(help_text='Array of answer options')),
                ('correct_index', models.IntegerField(help_text='Index of the correct answer')),
                ('explanation', models.TextField(help_text='Explanation of why the correct answer is right')),
                ('validation_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('FLAGGED', 'Flagged'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('validation_notes', models.TextField(blank=True, help_text='Notes from validation process')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comprehension_checks', to='database.learningobjective')),
            ],
            options={
                'ordering': ['learning_objective', 'created_at'],
                'indexes': [models.Index(fields=['learning_objective'], name='database_co_learnin_fd138c_idx'), models.Index(fields=['validation_status'], name='database_co_validat_2213b3_idx')],
            },
        ),
    ]
